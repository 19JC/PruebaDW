unit PRUEBA_DW;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls;

type
  TForm1 = class(TForm)
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    TabSheet3: TTabSheet;
    Label1: TLabel;
    edtNum: TEdit;
    btnCalcular: TButton;
    edtResul: TEdit;
    Label2: TLabel;
    procedure btnCalcularClick(Sender: TObject);
  private
    function Fibonacci(pInNumero,pInNumInic,pInNumFina,pInNumSuma,pInCont:integer;pStCadena:String):String;
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

{ TForm1 }

procedure TForm1.btnCalcularClick(Sender: TObject);
var
lInNumero:integer;
lStCadena:String;

begin
  try
     lInNumero:=StrToInt(edtNum.Text);
  Except
    raise Exception.Create('Por favor un numero valido');
  end;

   if not (lInNumero > 0) then
     raise Exception.Create('Numero debe ser mayor a 0');

    lStCadena:='';


    edtResul.Text := Fibonacci(lInNumero,1,1,0,1,lStCadena);
end;

function TForm1.Fibonacci(pInNumero,pInNumInic,pInNumFina,pInNumSuma,pInCont:integer;pStCadena:String): String;
begin
    if pInCont <= pInNumero then
    begin
      pInNumInic := pInNumfina;
      pInNumFina := pInNumSuma;
      pInNumSuma := pInNumInic + pInNumFina;

      pStCadena := pStCadena + IntToStr(pInNumSuma) + ', ';



    end;

    if pInCont < pInNumero then
    begin
      pInCont := pInCont+1 ;
      pStCadena := Fibonacci(pInNumero,pInNumInic,pInNumFina,pInNumSuma,pInCont,pStCadena);
    end;

    result := pStCadena;

end;

end.
